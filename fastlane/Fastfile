

to_publish = Hash.new
publish_metadata = Hash.new

desc "Produce final bundled javascript and css"
private_lane :build_web_pack do |options|
  Dir.chdir(Actions.lane_context[SharedValues::SANDBOX_PATH]) do
    sh "npm ci"
    FileUtils.mkdir_p("public/i18n")
    sh "npm run gettext:compile"
    sh "npm run build"
  end
end


desc "Check signing info are available and setup"
private_lane :_setup_signing do |options|

  case lane_context[SharedValues::PLATFORM_NAME]
  when :android
    ## Fail early if we don't have required info for signing
    check_android_signing_secrets_are_available(
      keystore_base64: options[:keystore_base64],
      keystore_file: options[:keystore_file],
      keystore_password: options[:keystore_password],
      keystore_password_file: options[:keystore_password_file],
    )
  when :ios
    check_ios_signing_secrets_are_available(
      api_key: options[:api_key],
      api_key_path: options[:api_key_path],
    )
  when :web
    ## Nothing to do
    UI.important "No signing happening for web. Ignoring."
  else
    UI.user_error!("Unknown platform #{lane_context[SharedValues::PLATFORM_NAME]}")
  end

end


desc "Build release packages"
private_lane :_build_apps do |options|
  _setup_signing options

  apps = options[:app]
  data = load_releases_data
  if apps != "monujo"
    apps = apps.split(",") if apps
    apps = data.keys unless apps
  else
    apps = ["monujo", ]
  end

  version_name_from_tag tag: options[:tag]
  version_code_from_tag tag: options[:tag], rev: options[:rev]

  for app in apps
    load_app_data app: app

    ## Load the platform dependent packaging
    package options
  end

end


lane :screenshot do |options|

  if File.exist? "../.screenshot.json"
    UI.message("Using configuration file '.screenshot.json'")
    screenshot_config = JSON.parse(File.read("../.screenshot.json"))
  else
    UI.message("No configuration file '.screenshot.json' found.")
    screenshot_config = Hash.new
  end

  host = options[:host] || ENV["SCREENSHOT_HOST"] ||
         screenshot_config["host"]
  if ! host
    UI.important(
      "No screenshot host specified, default host provided in `config.json` will be used.\n" +
      "You might want to force a different host for screenshot purpose only.\n" +
      "  You then need to set up a screenshot host using either:\n" +
      "  - command line argument of fastlane 'screenshot' with 'host:http://myhost.com'\n" +
      "  - environment variable SCREENSHOT_HOST\n" +
      "  - configuration file '.screenshot.json', key 'host'.\n"
    )
  else
    UI.important(
      "Diverting app for screenshots towards administration server: #{host}"
    )
  end

  db = options[:db] || ENV["SCREENSHOT_DB"] ||
       screenshot_config["db"]
  if ! db
    UI.important(
      "No screenshot database specified, default database provided in `config.json` will be used.\n" +
      "You might want to force a different database for screenshot purpose only.\n" +
      "  You then need to set up a screenshot host using either:\n" +
      "  - command line argument of fastlane 'screenshot' with 'db:odoo'\n" +
      "  - environment variable SCREENSHOT_DB\n" +
      "  - configuration file '.screenshot.json', key 'db'.\n"
    )
  else
    UI.important(
      "Diverting app for screenshots towards administration database: #{db}"
    )
  end

  if File.exist? "../cypress.env.json"
    UI.message("Using configuration file 'cypress.env.json'")
    cypress_config = JSON.parse(File.read("../cypress.env.json"))
  else
    UI.message("No configuration file 'cypress.env.json' found.")
    cypress_config = Hash.new
  end

  login = options[:login] || ENV["SCREENSHOT_LOGIN"] ||
          screenshot_config["login"] || ENV["CYPRESS_EMAIL"] ||
          cypress_config["email"]
  if ! login
    UI.user_error!(
      "Please specify a screenshot login for login in and make screenshots." +
      "  You need to set up a screenshot login using either:\n" +
      "  - command line argument of fastlane 'login' with 'login:my@user.com'\n" +
      "  - environment variable SCREENSHOT_LOGIN\n" +
      "  - configuration file '.screenshot.json', key 'login'.\n" +
      "  - environment variable CYPRESS_EMAIL\n" +
      "  - configuration file 'cypress.env.json', key 'email'.\n"
    )
  end

  password = options[:password] || ENV["SCREENSHOT_PASSWORD"] ||
             screenshot_config["password"] || ENV["CYPRESS_PASSWORD"] ||
             cypress_config["password"]
  if ! password
    UI.user_error!(
      "Please specify a screenshot password for login in and make screenshots." +
      "  You need to set up a screenshot password using either:\n" +
      "  - command line argument of fastlane 'password' with 'password:mypass'\n" +
      "  - environment variable SCREENSHOT_PASSWORD\n" +
      "  - configuration file '.screenshot.json', key 'password'.\n" +
      "  - environment variable CYPRESS_PASSWORD\n" +
      "  - configuration file 'cypress.env.json', key 'password'.\n"
    )
  end

  resolution = (options[:resolution] || ENV["SCREENSHOT_RESOLUTION"] || "").split(",")
  resolution = screenshot_config["resolutions"] if resolution.length == 0
  if ! resolution || resolution.length == 0
    UI.user_error! "Please specify a screenshot resolution."
    UI.user_error!(
      "Please specify at least a screenshot resolution." +
      "  You need to set up a screenshot resolution using either:\n" +
      "  - command line argument of fastlane 'resolution' with 'resolution:375x667,1024x768'\n" +
      "  - environment variable SCREENSHOT_RESOLUTION\n" +
      "  - configuration file '.screenshot.json', key 'resolutions' as an array.\n"
    )
  else
    UI.message "Using resolution(s): #{resolution.join(", ")}"
    resolution = resolution.join(",")
  end

  language = (options[:language] || ENV["SCREENSHOT_LANGUAGE"] || "").split(",")
  language = screenshot_config["languages"] if language.length == 0
  if ! language || language.length == 0
    UI.important(
      "No language specified, will create screenshots in all available languages from `config.json`.\n" +
      "  You can limit to one or more languages using either:\n" +
      "  - command line argument of fastlane 'language' with 'language:fr-FR,en-US'\n" +
      "  - environment variable SCREENSHOT_LANGUAGE\n" +
      "  - configuration file '.screenshot.json', key 'languages' as an array.\n"
    )
  else
    UI.message "Using language(s): #{language.join(", ")}"
    language = language.join(",")
  end

  apps = options[:app]
  data = load_releases_data
  if apps != "monujo"
    apps = apps.split(",") if apps
    apps = data.keys unless apps
  else
    apps = ["monujo", ]
  end

  version_name_from_tag tag: options[:tag]
  version_code_from_tag tag: options[:tag], rev: options[:rev]

  for app in apps
    load_app_data app: app

    _prepare_package

    take_screenshots(
      host: host,
      db: db,
      login: login,
      password: password,
      resolution: resolution,
      language: language,
      force: options[:force],
    )
  end
end


desc "Common platform preparation before build"
private_lane :_prepare_package do |options|

  ## Create sandboxed clone and customize app
  sandbox
  customize_app_with_resource unless lane_context[SharedValues::PLATFORM_NAME] == :web

  ## Fetch, transpiles and pack all web components
  build_web_pack

end


desc "Mobile platform preparation before build"
private_lane :_prepare_mobile_package do |options|
  capacitor_prepare
  version_prepare
end


desc "Build all assets needed for publication"
private_lane :_prepublish do |options|
  build options
  changelog options if options[:changelog]
  publish_metadata["tag"] = lane_context[SharedValues::VERSION_NAME]
end


desc "Make changelog for current release"
lane :changelog do |options|
  version_name_from_tag tag: options[:tag] unless lane_context[SharedValues::VERSION_NAME]
  gen_changelog
  tag = lane_context[SharedValues::VERSION_NAME]
  if File.exist? "../release/#{tag}/CHANGELOG"
    changelog = File.read("../release/#{tag}/CHANGELOG").lines
    publish_metadata["title"] = (changelog.shift).strip
    publish_metadata["changelog"] = changelog.join
  else
    publish_metadata["title"] = tag
    publish_metadata["changelog"] = false
  end
end


desc "Publish Github"
private_lane :_publish_github do |options|
  _prepublish options
  send_github options
end


desc "Send Github"
private_lane :send_github do |options|
  repository_name = options[:github_repository] || ENV["GITHUB_REPOSITORY"]
  if ! repository_name
    UI.message "No `github_repository` nor \$GITHUB_REPOSITORY environment variable set."
    UI.message "Trying to infer default release github repository:"
    begin
      origin_url = sh 'git config --get remote.origin.url'
      UI.message "  Remote origin URL is: #{origin_url}"

      if (match = origin_url.match(/github\.com[:\/]([a-zA-Z0-9-]+\/[a-zA-Z0-9-]+)(\.git)?$/))
        repository_name = match[1]
      end
      UI.message "  Inferring repository name: #{repository_name}"
    rescue
      UI.message "  Can't read remote named 'origin' !"
      UI.important "Can't infer default release repository. Will ask interactively."
    end
  end
  if ! ENV["GITHUB_API_TOKEN"] and ! ENV["GITHUB_TOKEN"]
    UI.user_error! "No \$GITHUB_API_TOKEN, nor \$GITHUB_TOKEN environment variable set."
  end
  github_release(
    repository_name: repository_name,
    name: publish_metadata["title"],
    tag_name: publish_metadata["tag"],
    description: publish_metadata["changelog"],
    commitish: "master",
    upload_assets: to_publish,
    overwrite_existing_assets: options[:overwrite_existing_assets],
    is_draft: options[:draft],
    is_prerelease: publish_metadata["tag"].include?("-rc."),
  )
end


platform :android do

  lane :build do |options|
    _build_apps options
  end

  lane :publish_github do |options|
    _publish_github options
  end

  private_lane :send_stores do |options|
    UI.user_error! "send_store not yet implemented for #{lane_context[SharedValues::PLATFORM_NAME]}!"
  end

  private_lane :prepare_mobile_package do |options|
    _prepare_mobile_package
  end

  private_lane :package do |options|

    app = lane_context[SharedValues::APP_NAME]
    version_name = lane_context[SharedValues::VERSION_NAME]
    version_code = lane_context[SharedValues::VERSION_CODE]

    file_name = "#{app}_#{version_name}_#{version_code}"
    bundle_file_name = "#{file_name}.aab"
    package_file_name = "#{file_name}.apk"
    result_dir="release/#{version_name}"
    result_file_label="#{app} - #{version_name} (#{version_code})"
    if File.exist? "../#{result_dir}/#{bundle_file_name}"
      if ! options[:force]
        UI.important "Release file of #{app} already exists in '#{result_dir}/#{bundle_file_name}'."
        UI.message "  Ignoring build. If you want to overwrite it, provide 'force:true' as an argument."
        to_publish["#{result_dir}/#{bundle_file_name}"] = "Android Bundle (AAB) - #{result_file_label}"
        if File.exist? "../#{result_dir}/#{package_file_name}"
          to_publish["#{result_dir}/#{package_file_name}"] = "Android App (APK) - #{result_file_label}"
        end
        next
      else
        UI.important "Existing release file for #{app} #{result_dir}/#{bundle_file_name} will be overwritten."
      end
    end

    _prepare_package
    prepare_mobile_package

    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: "#{Actions.lane_context[SharedValues::SANDBOX_PATH]}/android",
      properties: {
        ## Versioning
        "android.injected.version.code" => version_code,
        "android.injected.version.name" => version_name,

        ## Signing
        "android.injected.signing.store.file" => lane_context[SharedValues::ANDROID_KEYSTORE],
        "android.injected.signing.store.password" => ENV["RELEASE_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => lane_context[SharedValues::ANDROID_KEY_ALIAS],
        "android.injected.signing.key.password" => ENV["RELEASE_KEY_PASSWORD"],
      },
      print_command: false,
    )

    FileUtils.mkdir_p "../#{result_dir}"
    FileUtils.mv(lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
                 "../#{result_dir}/#{bundle_file_name}")
    to_publish["#{result_dir}/#{bundle_file_name}"] = "Android Bundle (AAB) - #{result_file_label}"

    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: "#{Actions.lane_context[SharedValues::SANDBOX_PATH]}/android",
      properties: {
        ## Versioning
        "android.injected.version.code" => version_code,
        "android.injected.version.name" => version_name,

        ## Signing
        "android.injected.signing.store.file" => lane_context[SharedValues::ANDROID_KEYSTORE],
        "android.injected.signing.store.password" => ENV["RELEASE_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => lane_context[SharedValues::ANDROID_KEY_ALIAS],
        "android.injected.signing.key.password" => ENV["RELEASE_KEY_PASSWORD"],
      },
      print_command: false,
    )

    FileUtils.mv(lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
                 "../#{result_dir}/#{package_file_name}")
    to_publish["#{result_dir}/#{package_file_name}"] = "Android App (APK) - #{result_file_label}"

  end


end


platform :ios do

  lane :build do |options|
    ## Lokavaluto's team id is hard-written here for now
    team_id "25AZX5J5PX"

    _build_apps options
  end

  lane :publish_github do |options|
    _publish_github options
  end

  private_lane :send_stores do |options|
    UI.user_error! "send_store not yet implemented for #{lane_context[SharedValues::PLATFORM_NAME]}!"
  end

  private_lane :prepare_mobile_package do |options|

    require 'xcodeproj'
    project_root = "#{Actions.lane_context[SharedValues::SANDBOX_PATH]}/ios/App/"
    project_path = project_root + "App.xcodeproj"
    project = Xcodeproj::Project.open(project_path)
    project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['CODE_SIGN_STYLE'] = "Manual"
        config.build_settings['CODE_SIGN_IDENTITY'] = "Apple Distribution"
        config.build_settings['DEVELOPMENT_TEAM'] = ENV['FASTLANE_TEAM_ID']
        config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = "match AppStore #{lane_context[SharedValues::APP_ID]}"
      end
    end
    project.save

    plist_path = project_root + "App/Info.plist"
    set_info_plist_value(path: plist_path, key: "ITSAppUsesNonExemptEncryption", value: "false")

    ##
    ## Modify json to remove links for app store acceptation
    ## (hopefully temporarily)
    ##

    config_path = "#{Actions.lane_context[SharedValues::SANDBOX_PATH]}/dist/config.json"
    config = JSON.parse(File.read(config_path))
    config['hideResetPassword'] = true
    config['hideAccountCreate'] = true
    File.write(config_path, JSON.pretty_generate(config))

    _prepare_mobile_package
  end

  private_lane :package do |options|

    app = lane_context[SharedValues::APP_NAME]
    version_name = lane_context[SharedValues::VERSION_NAME]
    version_code = lane_context[SharedValues::VERSION_CODE]

    app_id = lane_context[SharedValues::APP_ID]


    file_name = "#{app}_#{version_name}_#{version_code}"
    bundle_file_name = "#{file_name}.ipa"
    result_dir="release/#{version_name}"
    result_file_label="#{app} - #{version_name} (#{version_code})"
    if File.exist? "../#{result_dir}/#{bundle_file_name}"
      if ! options[:force]
        UI.important "Release file of #{app} already exists in '#{result_dir}/#{bundle_file_name}'."
        UI.message "  Ignoring build. If you want to overwrite it, provide 'force:true' as an argument."
        to_publish["#{result_dir}/#{bundle_file_name}"] = "iOS App Store Package (IPA) - #{result_file_label}"
        next
      else
        UI.important "Existing release file for #{app} #{result_dir}/#{bundle_file_name} will be overwritten."
      end
    end

    _prepare_package
    prepare_mobile_package

    Dir.chdir(Actions.lane_context[SharedValues::SANDBOX_PATH]) do
      UI.message sh('git diff ios', print_command_output: false)
    end

    ## Create temporary keychain for CI
    setup_ci if ENV['CI']
    match(type: "appstore", app_identifier: app_id, readonly: true)

    build_app(
      workspace: "#{Actions.lane_context[SharedValues::SANDBOX_PATH]}/ios/App/App.xcworkspace",
    )

    FileUtils.mkdir_p "../#{result_dir}"
    FileUtils.mv(lane_context[SharedValues::IPA_OUTPUT_PATH],
                 "../#{result_dir}/#{bundle_file_name}")
    to_publish["#{result_dir}/#{bundle_file_name}"] = "iOS App Store Package (IPA) - #{result_file_label}"

  end

end

platform :web do

  lane :build do |options|
    version_name_from_tag tag: options[:tag]

    lane_context[SharedValues::APP_NAME] = "monujo"
    ## Load the platform dependent packaging
    package options
  end

  lane :publish_github do |options|
    _publish_github options
  end

  private_lane :send_stores do |options|
    UI.user_error! "send_store not yet implemented for #{lane_context[SharedValues::PLATFORM_NAME]}!"
  end

  private_lane :package do |options|

    app = lane_context[SharedValues::APP_NAME]
    tag = lane_context[SharedValues::VERSION_NAME]

    file_name = "#{app}_#{tag}"
    package_file_name = "#{file_name}.tar.bz2"
    result_dir="release/#{tag}"
    if File.exist? "../#{result_dir}/#{package_file_name}"
      if ! options[:force]
        UI.important "Release file of #{app} already exists in '#{result_dir}/#{package_file_name}'."
        UI.message "  Ignoring build. If you want to overwrite it, provide 'force:true' as an argument."
        to_publish["#{result_dir}/#{package_file_name}"] = "Web (tar.bz2) - #{tag}"
        next
      else
        UI.important "Existing release file for #{app} #{result_dir}/#{package_file_name} will be overwritten."
      end
    end

    _prepare_package

    FileUtils.mkdir_p "../#{result_dir}"
    sh ("( cd \"#{Actions.lane_context[SharedValues::SANDBOX_PATH]}/dist\" ; tar cj . ) > " +
        "\"../#{result_dir}/#{package_file_name}\"")

    to_publish["#{result_dir}/#{package_file_name}"] = "Web (tar.bz2) - #{tag}"

  end
end
