

to_publish = Hash.new
publish_metadata = Hash.new

releases_data = nil

## key is `deliver`'s identifier, value is matching resolution
devices_ios_resolution = {
  IPHONE_55: "414x736x3",
  IPHONE_65: "414x896x3",
  IPHONE_67: "430x932x3",
  IPAD_PRO_129: "1024x1366x2",
  IPAD_PRO_3GEN_129: "1024x1366x2"
}


desc "Produce final bundled javascript and css"
private_lane :build_web_pack do |options|
  Dir.chdir(Actions.lane_context[SharedValues::SANDBOX_PATH]) do
    sh "npm ci"
    FileUtils.mkdir_p("public/i18n")
    sh "npm run gettext:compile"
    sh "npm run build"
  end
end


desc "Parse options and define precise targets (app and version)"
private_lane :_setup_targets do |options|
  apps = options[:app]
  releases_data = load_releases_data unless releases_data
  if apps != "monujo"
    apps = apps.split(",") if apps
    apps = releases_data.keys unless apps
  else
    apps = ["monujo", ]
  end

  if not lane_context[SharedValues::VERSION_NAME]
    version_name_from_tag tag: options[:tag]
  end
  if not lane_context[SharedValues::VERSION_CODE]
    version_code_from_tag tag: options[:tag], rev: options[:rev]
  end
  apps
end


desc "Check signing info are available and setup"
private_lane :_setup_signing do |options|

  case lane_context[SharedValues::PLATFORM_NAME]
  when :android
    ## Fail early if we don't have required info for signing
    check_android_signing_secrets_are_available(
      keystore_base64: options[:keystore_base64],
      keystore_file: options[:keystore_file],
      keystore_password: options[:keystore_password],
      keystore_password_file: options[:keystore_password_file],
    )
  when :ios
    check_ios_signing_secrets_are_available(
      api_key: options[:api_key],
      api_key_path: options[:api_key_path],
    )
  when :web
    ## Nothing to do
    UI.important "No signing happening for web. Ignoring."
  else
    UI.user_error!("Unknown platform #{lane_context[SharedValues::PLATFORM_NAME]}")
  end

end

desc "Check store access is available and setup"
private_lane :_setup_store do |options|

  case lane_context[SharedValues::PLATFORM_NAME]
  when :android
    UI.user_error!("No store for platform #{lane_context[SharedValues::PLATFORM_NAME]}")
    ## Fail early if we don't have required info for store access
    check_android_store_secrets_are_available(
      api_key: options[:api_key],
      api_key_path: options[:api_key_path],
    )
  when :ios
    check_ios_store_secrets_are_available(
      api_key: options[:api_key],
      api_key_path: options[:api_key_path],
    )
  when :web
    ## Nothing to do
    UI.user_error!("No store for platform #{lane_context[SharedValues::PLATFORM_NAME]}")
  else
    UI.user_error!("Unknown platform #{lane_context[SharedValues::PLATFORM_NAME]}")
  end

end



desc "Build release packages and/or screenshots"
private_lane :_build_apps do |options|

  if options[:package].nil? or options[:package]
      _setup_signing options
  end

  if options[:screenshot]
    check_screenshot_config(
      host: options[:host],
      db: options[:db],
      login: options[:login],
      password: options[:password],
      resolution: options[:resolution],
      language: options[:language],
    )
    screenshot_config = lane_context[SharedValues::SCREENSHOT_CONFIG]
  end

  for app in _setup_targets options
    load_app_data app: app

    ## Load the platform dependent packaging
    ## To do so, specify `package:false`
    if options[:package].nil? or options[:package]
      package options
    end

    if options[:screenshot]
      _prepare_package if not Actions.lane_context[SharedValues::SANDBOX_PATH]
      screenshot_config = lane_context[SharedValues::SCREENSHOT_CONFIG]

      take_screenshots(
        host: screenshot_config[:host],
        db: screenshot_config[:db],
        login: screenshot_config[:login],
        password: screenshot_config[:password],
        resolution: screenshot_config[:resolution],
        language: screenshot_config[:language],
        force: options[:force],
      )
    end
  end

end


lane :screenshot do |options|
  options[:package] = false
  options[:screenshot] = true
  _build_apps options
end


desc "Common platform preparation before build"
private_lane :_prepare_package do |options|

  ## Create sandboxed clone and customize app
  sandbox
  customize_app_with_resource unless lane_context[SharedValues::PLATFORM_NAME] == :web

  ## Fetch, transpiles and pack all web components
  build_web_pack

end


desc "Mobile platform preparation before build"
private_lane :_prepare_mobile_package do |options|
  capacitor_prepare
  version_prepare
end


desc "Build all assets needed for publication"
private_lane :_prepublish do |options|
  build options
  changelog options if options[:changelog]
  publish_metadata["tag"] = lane_context[SharedValues::VERSION_NAME]
end


desc "Make changelog for current release"
lane :changelog do |options|
  version_name_from_tag tag: options[:tag] unless lane_context[SharedValues::VERSION_NAME]
  gen_changelog
  tag = lane_context[SharedValues::VERSION_NAME]
  if File.exist? "../release/#{tag}/CHANGELOG"
    changelog = File.read("../release/#{tag}/CHANGELOG").lines
    publish_metadata["title"] = (changelog.shift).strip
    publish_metadata["changelog"] = changelog.join
  else
    publish_metadata["title"] = tag
    publish_metadata["changelog"] = false
  end
end


desc "Publish Github"
private_lane :_publish_github do |options|
  _prepublish options unless publish_metadata.entries.length != 0
  _send_github options
end


desc "Publish Store"
private_lane :_publish_store do |options|
  _setup_store
  _prepublish options unless publish_metadata.entries.length != 0
  send_store options
end


desc "Send Github"
private_lane :_send_github do |options|
  repository_name = options[:github_repository] || ENV["GITHUB_REPOSITORY"]
  if ! repository_name
    UI.message "No `github_repository` nor \$GITHUB_REPOSITORY environment variable set."
    UI.message "Trying to infer default release github repository:"
    begin
      origin_url = sh 'git config --get remote.origin.url'
      UI.message "  Remote origin URL is: #{origin_url}"

      if (match = origin_url.match(/github\.com[:\/]([a-zA-Z0-9-]+\/[a-zA-Z0-9-]+)(\.git)?$/))
        repository_name = match[1]
      end
      UI.message "  Inferring repository name: #{repository_name}"
    rescue
      UI.message "  Can't read remote named 'origin' !"
      UI.important "Can't infer default release repository. Will ask interactively."
    end
  end
  if ! ENV["GITHUB_API_TOKEN"] and ! ENV["GITHUB_TOKEN"]
    UI.user_error! "No \$GITHUB_API_TOKEN, nor \$GITHUB_TOKEN environment variable set."
  end
  github_release(
    repository_name: repository_name,
    name: publish_metadata["title"],
    tag_name: publish_metadata["tag"],
    description: publish_metadata["changelog"],
    upload_assets: to_publish,
    overwrite_existing_assets: options[:overwrite_existing_assets],
    is_draft: options[:draft],
    is_prerelease: publish_metadata["tag"].include?("-rc."),
  )
end


platform :android do

  lane :build do |options|
    _build_apps options
  end

  lane :publish do |options|
    publish_store options
    _publish_github options
  end

  lane :publish_github do |options|
    _publish_github options
  end

  lane :publish_store do |options|
    _store_resolutions options
    _publish_store options
  end

  private_lane :store_resolution do |options|
    UI.user_error! "send_store not yet implemented for #{lane_context[SharedValues::PLATFORM_NAME]}!"
  end

  private_lane :send_store do |options|
    UI.user_error! "send_store not yet implemented for #{lane_context[SharedValues::PLATFORM_NAME]}!"
  end

  private_lane :prepare_mobile_package do |options|
    _prepare_mobile_package
  end

  private_lane :package do |options|

    app = lane_context[SharedValues::APP_NAME]
    version_name = lane_context[SharedValues::VERSION_NAME]
    version_code = lane_context[SharedValues::VERSION_CODE]

    file_name = "#{app}_#{version_name}_#{version_code}"
    bundle_file_name = "#{file_name}.aab"
    package_file_name = "#{file_name}.apk"
    result_dir="release/#{version_name}"
    result_file_label="#{app} - #{version_name} (#{version_code})"
    if File.exist? "../#{result_dir}/#{bundle_file_name}"
      if ! options[:force]
        UI.important "Release file of #{app} already exists in '#{result_dir}/#{bundle_file_name}'."
        UI.message "  Ignoring build. If you want to overwrite it, provide 'force:true' as an argument."
        to_publish["#{result_dir}/#{bundle_file_name}"] = "Android Bundle (AAB) - #{result_file_label}"
        if File.exist? "../#{result_dir}/#{package_file_name}"
          to_publish["#{result_dir}/#{package_file_name}"] = "Android App (APK) - #{result_file_label}"
        end
        next
      else
        UI.important "Existing release file for #{app} #{result_dir}/#{bundle_file_name} will be overwritten."
      end
    end

    _prepare_package
    prepare_mobile_package

    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: "#{Actions.lane_context[SharedValues::SANDBOX_PATH]}/android",
      properties: {
        ## Versioning
        "android.injected.version.code" => version_code,
        "android.injected.version.name" => version_name,

        ## Signing
        "android.injected.signing.store.file" => lane_context[SharedValues::ANDROID_KEYSTORE],
        "android.injected.signing.store.password" => ENV["RELEASE_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => lane_context[SharedValues::ANDROID_KEY_ALIAS],
        "android.injected.signing.key.password" => ENV["RELEASE_KEY_PASSWORD"],
      },
      print_command: false,
    )

    FileUtils.mkdir_p "../#{result_dir}"
    FileUtils.mv(lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
                 "../#{result_dir}/#{bundle_file_name}")
    to_publish["#{result_dir}/#{bundle_file_name}"] = "Android Bundle (AAB) - #{result_file_label}"

    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: "#{Actions.lane_context[SharedValues::SANDBOX_PATH]}/android",
      properties: {
        ## Versioning
        "android.injected.version.code" => version_code,
        "android.injected.version.name" => version_name,

        ## Signing
        "android.injected.signing.store.file" => lane_context[SharedValues::ANDROID_KEYSTORE],
        "android.injected.signing.store.password" => ENV["RELEASE_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => lane_context[SharedValues::ANDROID_KEY_ALIAS],
        "android.injected.signing.key.password" => ENV["RELEASE_KEY_PASSWORD"],
      },
      print_command: false,
    )

    FileUtils.mv(lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
                 "../#{result_dir}/#{package_file_name}")
    to_publish["#{result_dir}/#{package_file_name}"] = "Android App (APK) - #{result_file_label}"

  end


end


platform :ios do

  lane :build do |options|
    ## Lokavaluto's team id is hard-written here for now
    team_id "25AZX5J5PX"

    _build_apps options
  end

  lane :publish do |options|
    publish_store options
  end

  lane :publish_github do |options|
    _publish_github options
  end

  lane :publish_store do |options|
    if options[:screenshot].nil? or options[:screenshot]
      _store_resolutions options
      options[:screenshot] = true
    end
    _publish_store options
  end

  private_lane :_store_resolutions do |options|
    if options[:resolution]
      UI.user_error!(
        "You should not provide resolutions as they are inferred from " +
        "the platform's store"
      )
    end

    devices = (
      options[:device] || ENV["SCREENSHOT_DEVICE"] || ""
    ).split(",").map { |k| k.to_sym }

    if devices.length != 0
      ## Filter out the devices_ios_resolution Hash
      devices_ios_resolution = (
        devices_ios_resolution.entries
          .filter { |k, v| devices.include? k }
      ).to_h
    end
    UI.message "Target device for resolution: #{devices_ios_resolution.keys.join(", ")}"

    ## Filter
    options[:resolution] = devices_ios_resolution.values.uniq.join(",")
  end
  
  lane :publish_screenshots do |options|
    ## Check if `deliver` has all required authentication stuff ready
    _setup_store
    _store_resolutions options
    screenshot options
    send_store options
  end

  private_lane :send_store do |options|
    ## Publish package that have been built
    to_publish.each do |path, label|
      app = "#{path}".split('/')[-1] \
              .split('_')[0]

      ## XXXvlab: duplicate transformation for iOS (see version_prepare)
      load_app_data app: app
      build_number = lane_context[SharedValues::VERSION_CODE].to_s

      ## Fetch existing version

      app = Spaceship::ConnectAPI::App.find(
        lane_context[SharedValues::APP_ID]
      )
      builds = Spaceship::ConnectAPI.get_builds(
        filter: { app: app.id },
        sort: "-uploadedDate",
        includes: "preReleaseVersion"
      )
      versions = builds.map { |build| build.version }

      already_uploaded = versions.include?(build_number)
      if already_uploaded
        UI.user_error!(
          "Current IPA with same build number (" +
          lane_context[SharedValues::VERSION_CODE].to_s +
          ") is already on testflight. You must build a new IPA with a " +
          "new build number."
        )
      end
      upload_to_testflight(
        app_identifier: lane_context[SharedValues::APP_ID],
        ipa: path,
      )
    end

    ## Publish screenshots that have been taken
    for app in _setup_targets options
      load_app_data app: app

      send_store_screenshots_appstore(
        devices_ios_resolution: devices_ios_resolution
      )
    end
  end

  private_lane :prepare_mobile_package do |options|

    require 'xcodeproj'
    project_root = "#{Actions.lane_context[SharedValues::SANDBOX_PATH]}/ios/App/"
    project_path = project_root + "App.xcodeproj"
    project = Xcodeproj::Project.open(project_path)
    project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['CODE_SIGN_STYLE'] = "Manual"
        config.build_settings['CODE_SIGN_IDENTITY'] = "Apple Distribution"
        config.build_settings['DEVELOPMENT_TEAM'] = ENV['FASTLANE_TEAM_ID']
        config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = "match AppStore #{lane_context[SharedValues::APP_ID]}"
      end
    end
    project.save

    plist_path = project_root + "App/Info.plist"
    set_info_plist_value(path: plist_path, key: "ITSAppUsesNonExemptEncryption", value: "false")

    _prepare_mobile_package
  end

  private_lane :package do |options|

    app = lane_context[SharedValues::APP_NAME]
    version_name = lane_context[SharedValues::VERSION_NAME]
    version_code = lane_context[SharedValues::VERSION_CODE]

    app_id = lane_context[SharedValues::APP_ID]


    file_name = "#{app}_#{version_name}_#{version_code}"
    bundle_file_name = "#{file_name}.ipa"
    result_dir="release/#{version_name}"
    result_file_label="#{app} - #{version_name} (#{version_code})"
    if File.exist? "../#{result_dir}/#{bundle_file_name}"
      if ! options[:force]
        UI.important "Release file of #{app} already exists in '#{result_dir}/#{bundle_file_name}'."
        UI.message "  Ignoring build. If you want to overwrite it, provide 'force:true' as an argument."
        to_publish["#{result_dir}/#{bundle_file_name}"] = "iOS App Store Package (IPA) - #{result_file_label}"
        next
      else
        UI.important "Existing release file for #{app} #{result_dir}/#{bundle_file_name} will be overwritten."
      end
    end

    _prepare_package
    prepare_mobile_package

    Dir.chdir(Actions.lane_context[SharedValues::SANDBOX_PATH]) do
      UI.message sh('git diff ios', print_command_output: false)
    end

    ## Create temporary keychain for CI
    setup_ci if ENV['CI']
    match(type: "appstore", app_identifier: app_id, readonly: true)

    build_app(
      workspace: "#{Actions.lane_context[SharedValues::SANDBOX_PATH]}/ios/App/App.xcworkspace",
    )

    FileUtils.mkdir_p "../#{result_dir}"
    FileUtils.mv(lane_context[SharedValues::IPA_OUTPUT_PATH],
                 "../#{result_dir}/#{bundle_file_name}")
    to_publish["#{result_dir}/#{bundle_file_name}"] = "iOS App Store Package (IPA) - #{result_file_label}"

  end

end

platform :web do

  lane :publish do |options|
    _publish_github options
  end

  lane :build do |options|
    version_name_from_tag tag: options[:tag]

    lane_context[SharedValues::APP_NAME] = "monujo"
    ## Load the platform dependent packaging
    package options
  end

  lane :publish_github do |options|
    _publish_github options
  end

  lane :send_store do |options|
    UI.user_error! "send_store not yet implemented for #{lane_context[SharedValues::PLATFORM_NAME]}!"
  end

  private_lane :package do |options|

    app = lane_context[SharedValues::APP_NAME]
    tag = lane_context[SharedValues::VERSION_NAME]

    file_name = "#{app}_#{tag}"
    package_file_name = "#{file_name}.tar.bz2"
    result_dir="release/#{tag}"
    if File.exist? "../#{result_dir}/#{package_file_name}"
      if ! options[:force]
        UI.important "Release file of #{app} already exists in '#{result_dir}/#{package_file_name}'."
        UI.message "  Ignoring build. If you want to overwrite it, provide 'force:true' as an argument."
        to_publish["#{result_dir}/#{package_file_name}"] = "Web (tar.bz2) - #{tag}"
        next
      else
        UI.important "Existing release file for #{app} #{result_dir}/#{package_file_name} will be overwritten."
      end
    end

    _prepare_package

    FileUtils.mkdir_p "../#{result_dir}"
    sh ("( cd \"#{Actions.lane_context[SharedValues::SANDBOX_PATH]}/dist\" ; tar cj . ) > " +
        "\"../#{result_dir}/#{package_file_name}\"")

    to_publish["#{result_dir}/#{package_file_name}"] = "Web (tar.bz2) - #{tag}"

  end
end
